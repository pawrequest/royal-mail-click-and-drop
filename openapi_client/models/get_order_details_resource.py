# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.get_order_line_result import GetOrderLineResult
from openapi_client.models.get_postal_details_result import GetPostalDetailsResult
from openapi_client.models.get_shipping_details_result import GetShippingDetailsResult
from openapi_client.models.get_tag_details_result import GetTagDetailsResult
from typing import Optional, Set
from typing_extensions import Self

class GetOrderDetailsResource(BaseModel):
    """
    GetOrderDetailsResource
    """ # noqa: E501
    order_identifier: Optional[StrictInt] = Field(default=None, alias="orderIdentifier")
    order_status: Optional[StrictStr] = Field(default=None, alias="orderStatus")
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    printed_on: Optional[datetime] = Field(default=None, alias="printedOn")
    shipped_on: Optional[datetime] = Field(default=None, alias="shippedOn")
    postage_applied_on: Optional[datetime] = Field(default=None, alias="postageAppliedOn")
    manifested_on: Optional[datetime] = Field(default=None, alias="manifestedOn")
    order_date: Optional[datetime] = Field(default=None, alias="orderDate")
    despatched_by_other_courier_on: Optional[datetime] = Field(default=None, alias="despatchedByOtherCourierOn")
    trading_name: Optional[StrictStr] = Field(default=None, alias="tradingName")
    channel: Optional[StrictStr] = None
    marketplace_type_name: Optional[StrictStr] = Field(default=None, alias="marketplaceTypeName")
    department: Optional[StrictStr] = None
    air_number: Optional[StrictStr] = Field(default=None, alias="AIRNumber")
    requires_export_license: Optional[StrictBool] = Field(default=None, alias="requiresExportLicense")
    commercial_invoice_number: Optional[StrictStr] = Field(default=None, alias="commercialInvoiceNumber")
    commercial_invoice_date: Optional[datetime] = Field(default=None, alias="commercialInvoiceDate")
    order_reference: Optional[StrictStr] = Field(default=None, alias="orderReference")
    channel_shipping_method: Optional[StrictStr] = Field(default=None, alias="channelShippingMethod")
    special_instructions: Optional[StrictStr] = Field(default=None, alias="specialInstructions")
    picker_special_instructions: Optional[StrictStr] = Field(default=None, alias="pickerSpecialInstructions")
    subtotal: Union[StrictFloat, StrictInt] = Field(description="The total value of all the goods in the order, excluding tax")
    shipping_cost_charged: Union[StrictFloat, StrictInt] = Field(description="The shipping costs you charged to your customer", alias="shippingCostCharged")
    order_discount: Union[StrictFloat, StrictInt] = Field(alias="orderDiscount")
    total: Union[StrictFloat, StrictInt] = Field(description="The sum of order subtotal, tax and retail shipping costs")
    weight_in_grams: StrictInt = Field(alias="weightInGrams")
    package_size: Optional[StrictStr] = Field(default=None, alias="packageSize")
    account_batch_number: Optional[StrictStr] = Field(default=None, alias="accountBatchNumber")
    currency_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, alias="currencyCode")
    shipping_details: GetShippingDetailsResult = Field(alias="shippingDetails")
    shipping_info: GetPostalDetailsResult = Field(alias="shippingInfo")
    billing_info: GetPostalDetailsResult = Field(alias="billingInfo")
    order_lines: List[GetOrderLineResult] = Field(alias="orderLines")
    tags: Optional[List[GetTagDetailsResult]] = None
    __properties: ClassVar[List[str]] = ["orderIdentifier", "orderStatus", "createdOn", "printedOn", "shippedOn", "postageAppliedOn", "manifestedOn", "orderDate", "despatchedByOtherCourierOn", "tradingName", "channel", "marketplaceTypeName", "department", "AIRNumber", "requiresExportLicense", "commercialInvoiceNumber", "commercialInvoiceDate", "orderReference", "channelShippingMethod", "specialInstructions", "pickerSpecialInstructions", "subtotal", "shippingCostCharged", "orderDiscount", "total", "weightInGrams", "packageSize", "accountBatchNumber", "currencyCode", "shippingDetails", "shippingInfo", "billingInfo", "orderLines", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrderDetailsResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipping_details
        if self.shipping_details:
            _dict['shippingDetails'] = self.shipping_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_info
        if self.shipping_info:
            _dict['shippingInfo'] = self.shipping_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_info
        if self.billing_info:
            _dict['billingInfo'] = self.billing_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_lines (list)
        _items = []
        if self.order_lines:
            for _item_order_lines in self.order_lines:
                if _item_order_lines:
                    _items.append(_item_order_lines.to_dict())
            _dict['orderLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrderDetailsResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderIdentifier": obj.get("orderIdentifier"),
            "orderStatus": obj.get("orderStatus"),
            "createdOn": obj.get("createdOn"),
            "printedOn": obj.get("printedOn"),
            "shippedOn": obj.get("shippedOn"),
            "postageAppliedOn": obj.get("postageAppliedOn"),
            "manifestedOn": obj.get("manifestedOn"),
            "orderDate": obj.get("orderDate"),
            "despatchedByOtherCourierOn": obj.get("despatchedByOtherCourierOn"),
            "tradingName": obj.get("tradingName"),
            "channel": obj.get("channel"),
            "marketplaceTypeName": obj.get("marketplaceTypeName"),
            "department": obj.get("department"),
            "AIRNumber": obj.get("AIRNumber"),
            "requiresExportLicense": obj.get("requiresExportLicense"),
            "commercialInvoiceNumber": obj.get("commercialInvoiceNumber"),
            "commercialInvoiceDate": obj.get("commercialInvoiceDate"),
            "orderReference": obj.get("orderReference"),
            "channelShippingMethod": obj.get("channelShippingMethod"),
            "specialInstructions": obj.get("specialInstructions"),
            "pickerSpecialInstructions": obj.get("pickerSpecialInstructions"),
            "subtotal": obj.get("subtotal"),
            "shippingCostCharged": obj.get("shippingCostCharged"),
            "orderDiscount": obj.get("orderDiscount"),
            "total": obj.get("total"),
            "weightInGrams": obj.get("weightInGrams"),
            "packageSize": obj.get("packageSize"),
            "accountBatchNumber": obj.get("accountBatchNumber"),
            "currencyCode": obj.get("currencyCode"),
            "shippingDetails": GetShippingDetailsResult.from_dict(obj["shippingDetails"]) if obj.get("shippingDetails") is not None else None,
            "shippingInfo": GetPostalDetailsResult.from_dict(obj["shippingInfo"]) if obj.get("shippingInfo") is not None else None,
            "billingInfo": GetPostalDetailsResult.from_dict(obj["billingInfo"]) if obj.get("billingInfo") is not None else None,
            "orderLines": [GetOrderLineResult.from_dict(_item) for _item in obj["orderLines"]] if obj.get("orderLines") is not None else None,
            "tags": [GetTagDetailsResult.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None
        })
        return _obj


