# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostageDetailsRequest(BaseModel):
    """
    PostageDetailsRequest
    """ # noqa: E501
    send_notifications_to: Optional[StrictStr] = Field(default=None, alias="sendNotificationsTo")
    service_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, alias="serviceCode")
    carrier_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="carrierName")
    service_register_code: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, alias="serviceRegisterCode")
    consequential_loss: Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]] = Field(default=None, alias="consequentialLoss")
    receive_email_notification: Optional[StrictBool] = Field(default=None, alias="receiveEmailNotification")
    receive_sms_notification: Optional[StrictBool] = Field(default=None, alias="receiveSmsNotification")
    guaranteed_saturday_delivery: Optional[StrictBool] = Field(default=None, description="This field has been deprecated", alias="guaranteedSaturdayDelivery")
    request_signature_upon_delivery: Optional[StrictBool] = Field(default=None, alias="requestSignatureUponDelivery")
    is_local_collect: Optional[StrictBool] = Field(default=None, alias="isLocalCollect")
    safe_place: Optional[Annotated[str, Field(strict=True, max_length=90)]] = Field(default=None, alias="safePlace")
    department: Optional[Annotated[str, Field(strict=True, max_length=150)]] = None
    air_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="For B2B orders shipping from Great Britain to Northern Ireland, this field can be used to provide the Recipient UKIMs number.", alias="AIRNumber")
    ioss_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="IOSSNumber")
    requires_export_license: Optional[StrictBool] = Field(default=None, alias="requiresExportLicense")
    commercial_invoice_number: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, alias="commercialInvoiceNumber")
    commercial_invoice_date: Optional[datetime] = Field(default=None, alias="commercialInvoiceDate")
    recipient_eori_number: Optional[StrictStr] = Field(default=None, alias="recipientEoriNumber")
    __properties: ClassVar[List[str]] = ["sendNotificationsTo", "serviceCode", "carrierName", "serviceRegisterCode", "consequentialLoss", "receiveEmailNotification", "receiveSmsNotification", "guaranteedSaturdayDelivery", "requestSignatureUponDelivery", "isLocalCollect", "safePlace", "department", "AIRNumber", "IOSSNumber", "requiresExportLicense", "commercialInvoiceNumber", "commercialInvoiceDate", "recipientEoriNumber"]

    @field_validator('send_notifications_to')
    def send_notifications_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['sender', 'recipient', 'billing']):
            raise ValueError("must be one of enum values ('sender', 'recipient', 'billing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostageDetailsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostageDetailsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sendNotificationsTo": obj.get("sendNotificationsTo"),
            "serviceCode": obj.get("serviceCode"),
            "carrierName": obj.get("carrierName"),
            "serviceRegisterCode": obj.get("serviceRegisterCode"),
            "consequentialLoss": obj.get("consequentialLoss"),
            "receiveEmailNotification": obj.get("receiveEmailNotification"),
            "receiveSmsNotification": obj.get("receiveSmsNotification"),
            "guaranteedSaturdayDelivery": obj.get("guaranteedSaturdayDelivery"),
            "requestSignatureUponDelivery": obj.get("requestSignatureUponDelivery"),
            "isLocalCollect": obj.get("isLocalCollect"),
            "safePlace": obj.get("safePlace"),
            "department": obj.get("department"),
            "AIRNumber": obj.get("AIRNumber"),
            "IOSSNumber": obj.get("IOSSNumber"),
            "requiresExportLicense": obj.get("requiresExportLicense"),
            "commercialInvoiceNumber": obj.get("commercialInvoiceNumber"),
            "commercialInvoiceDate": obj.get("commercialInvoiceDate"),
            "recipientEoriNumber": obj.get("recipientEoriNumber")
        })
        return _obj


