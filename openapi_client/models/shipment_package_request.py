# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.dimensions_request import DimensionsRequest
from openapi_client.models.product_item_request import ProductItemRequest
from typing import Optional, Set
from typing_extensions import Self

class ShipmentPackageRequest(BaseModel):
    """
    ShipmentPackageRequest
    """ # noqa: E501
    weight_in_grams: Annotated[int, Field(le=30000, strict=True, ge=1)] = Field(alias="weightInGrams")
    package_format_identifier: StrictStr = Field(description="<b>If you have a ChannelShipper account, you can also pass the name of any of your custom package formats instead of the values below.</b><br> Enum: 'undefined', 'letter', 'largeLetter', 'smallParcel', 'mediumParcel', 'parcel', 'documents'", alias="packageFormatIdentifier")
    custom_package_format_identifier: Optional[StrictStr] = Field(default=None, description="This field will be deprecated in the future. Please use 'packageFormatIdentifier' for custom package formats from ChannelShipper.", alias="customPackageFormatIdentifier")
    dimensions: Optional[DimensionsRequest] = None
    contents: Optional[List[ProductItemRequest]] = None
    __properties: ClassVar[List[str]] = ["weightInGrams", "packageFormatIdentifier", "customPackageFormatIdentifier", "dimensions", "contents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentPackageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentPackageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "weightInGrams": obj.get("weightInGrams"),
            "packageFormatIdentifier": obj.get("packageFormatIdentifier"),
            "customPackageFormatIdentifier": obj.get("customPackageFormatIdentifier"),
            "dimensions": DimensionsRequest.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "contents": [ProductItemRequest.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None
        })
        return _obj


