# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProductItemRequest(BaseModel):
    """
    ProductItemRequest
    """ # noqa: E501
    name: Optional[Annotated[str, Field(strict=True, max_length=800)]] = None
    sku: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The presence or not of field <b>SKU</b> and other fields in the request body will determine which of the following behaviours occur:- <br>1) A minimum of <b>SKU</b>, <b>unitValue</b>, <b>unitWeightInGrams</b> and <b>quantity</b> provided - In addition to the provided product fields being used for the order creation, an existing account Product with matching SKU will be overwritten with all provided product parameters. If no existing account Product with matching SKU can be found then a new product will be created with the provided SKU and product parameters.<br>2) <b>SKU</b>, <b>quantity</b> provided and <b>no other fields</b> provided - An account Product with the provided SKU will be used for the order if it exists.<br>3) <b>SKU not provided</b> and a minimum of <b>unitValue</b>, <b>unitWeightInGrams</b> and <b>quantity</b> provided - All provided product fields will be used for the order creation.<br>4) All other scenarios will result in a validation error.", alias="SKU")
    quantity: Annotated[int, Field(le=999999, strict=True, ge=1)] = Field(description="The number of units in a given line")
    unit_value: Optional[Union[Annotated[float, Field(multiple_of=0.01, le=999999, strict=True, ge=0)], Annotated[int, Field(le=999999, strict=True, ge=0)]]] = Field(default=None, description="The price of a single unit excluding tax", alias="unitValue")
    unit_weight_in_grams: Optional[Annotated[int, Field(le=999999, strict=True, ge=0)]] = Field(default=None, alias="unitWeightInGrams")
    customs_description: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="customsDescription")
    extended_customs_description: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(default=None, alias="extendedCustomsDescription")
    customs_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, alias="customsCode")
    origin_country_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, alias="originCountryCode")
    customs_declaration_category: Optional[StrictStr] = Field(default=None, alias="customsDeclarationCategory")
    requires_export_licence: Optional[StrictBool] = Field(default=None, alias="requiresExportLicence")
    stock_location: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, alias="stockLocation")
    use_origin_preference: Optional[StrictBool] = Field(default=None, alias="useOriginPreference")
    supplementary_units: Optional[Annotated[str, Field(strict=True, max_length=17)]] = Field(default=None, alias="supplementaryUnits")
    license_number: Optional[Annotated[str, Field(strict=True, max_length=41)]] = Field(default=None, alias="licenseNumber")
    certificate_number: Optional[Annotated[str, Field(strict=True, max_length=41)]] = Field(default=None, alias="certificateNumber")
    __properties: ClassVar[List[str]] = ["name", "SKU", "quantity", "unitValue", "unitWeightInGrams", "customsDescription", "extendedCustomsDescription", "customsCode", "originCountryCode", "customsDeclarationCategory", "requiresExportLicence", "stockLocation", "useOriginPreference", "supplementaryUnits", "licenseNumber", "certificateNumber"]

    @field_validator('customs_declaration_category')
    def customs_declaration_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'gift', 'commercialSample', 'documents', 'other', 'returnedGoods', 'saleOfGoods', 'mixedContent']):
            raise ValueError("must be one of enum values ('none', 'gift', 'commercialSample', 'documents', 'other', 'returnedGoods', 'saleOfGoods', 'mixedContent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "SKU": obj.get("SKU"),
            "quantity": obj.get("quantity"),
            "unitValue": obj.get("unitValue"),
            "unitWeightInGrams": obj.get("unitWeightInGrams"),
            "customsDescription": obj.get("customsDescription"),
            "extendedCustomsDescription": obj.get("extendedCustomsDescription"),
            "customsCode": obj.get("customsCode"),
            "originCountryCode": obj.get("originCountryCode"),
            "customsDeclarationCategory": obj.get("customsDeclarationCategory"),
            "requiresExportLicence": obj.get("requiresExportLicence"),
            "stockLocation": obj.get("stockLocation"),
            "useOriginPreference": obj.get("useOriginPreference"),
            "supplementaryUnits": obj.get("supplementaryUnits"),
            "licenseNumber": obj.get("licenseNumber"),
            "certificateNumber": obj.get("certificateNumber")
        })
        return _obj


