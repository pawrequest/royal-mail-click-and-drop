# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from royal_mail_click_and_drop.models.create_order_label_error_response import CreateOrderLabelErrorResponse
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderResponse(BaseModel):
    """
    CreateOrderResponse
    """ # noqa: E501
    order_identifier: StrictInt = Field(alias="orderIdentifier")
    order_reference: Optional[StrictStr] = Field(default=None, alias="orderReference")
    created_on: datetime = Field(alias="createdOn")
    order_date: Optional[datetime] = Field(default=None, alias="orderDate")
    printed_on: Optional[datetime] = Field(default=None, alias="printedOn")
    manifested_on: Optional[datetime] = Field(default=None, alias="manifestedOn")
    shipped_on: Optional[datetime] = Field(default=None, alias="shippedOn")
    tracking_number: Optional[StrictStr] = Field(default=None, alias="trackingNumber")
    label: Optional[StrictStr] = Field(default=None, description="label in format base64 string")
    label_errors: Optional[List[CreateOrderLabelErrorResponse]] = Field(default=None, alias="labelErrors")
    generated_documents: Optional[List[StrictStr]] = Field(default=None, alias="generatedDocuments")
    __properties: ClassVar[List[str]] = ["orderIdentifier", "orderReference", "createdOn", "orderDate", "printedOn", "manifestedOn", "shippedOn", "trackingNumber", "label", "labelErrors", "generatedDocuments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in label_errors (list)
        _items = []
        if self.label_errors:
            for _item_label_errors in self.label_errors:
                if _item_label_errors:
                    _items.append(_item_label_errors.to_dict())
            _dict['labelErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderIdentifier": obj.get("orderIdentifier"),
            "orderReference": obj.get("orderReference"),
            "createdOn": obj.get("createdOn"),
            "orderDate": obj.get("orderDate"),
            "printedOn": obj.get("printedOn"),
            "manifestedOn": obj.get("manifestedOn"),
            "shippedOn": obj.get("shippedOn"),
            "trackingNumber": obj.get("trackingNumber"),
            "label": obj.get("label"),
            "labelErrors": [CreateOrderLabelErrorResponse.from_dict(_item) for _item in obj["labelErrors"]] if obj.get("labelErrors") is not None else None,
            "generatedDocuments": obj.get("generatedDocuments")
        })
        return _obj


